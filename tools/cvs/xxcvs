#!/usr/bin/env python
#******************************************************************************\
#* $Id: xxcvs 70 2001-03-20 00:38:26Z blais $
#* $Date: 2001-03-19 19:38:26 -0500 (Mon, 19 Mar 2001) $
#*
#* Copyright (C) 2001 Martin Blais <blais@iro.umontreal.ca>
#*
#* This program is free software; you can redistribute it and/or modify
#* it under the terms of the GNU General Public License as published by
#* the Free Software Foundation; either version 2 of the License, or
#* (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, write to the Free Software
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#*
#*****************************************************************************/

#===============================================================================
# EXTERNAL DECLARATIONS
#===============================================================================

import sys, getopt, os.path
import re, string
import time
import tempfile
import errno

#===============================================================================
# LOCAL DECLARATIONS
#===============================================================================

# Commands
NONE = 0
PREVIOUS = 1
BRANCH = 2
MERGE = 3
UPDATE = 4

#===============================================================================
# CLASS Options
#===============================================================================

class Options:
    debug = 0
    xxdiff_args = ''
    command = NONE
    xxdiff = 'xxdiff'

#-------------------------------------------------------------------------------
#
def printUsage():
    print "Usage:", os.path.basename( sys.argv[0] ),\
          " [<options>] <file[@@ver]> [<file[@@ver]> ...]"
    sys.stderr.write( """

   Extended syntax is <filename>@@<revision>, where revision can be
   a revision number or a tag. If revision is not specified, use the
   revision in the user's checkedout revision.

   -h, -?, --help:
        Prints this help message.
   -A <args>, --args=<args>
        Arguments are passed directly to xxdiff.
   -p, --previous:
        Diffs with previous revision.
   -b, --branch:
        Diffs with previous tagged revision.
   -m, --merge:
        Diffs with ancestor and latest main branch
        (if different from ancestor).
   -u, --update:
        Performs an update, on conflicts invoke graphical comparison
        and merge tool (preselecting resolved changes).

   If no command is specified, just diff the specified files.
""" )


#-------------------------------------------------------------------------------
#
# Parses extended names and returns a list of ( filename, revision ) pairs.
#
def parseNames( filelist ):
    mre = re.compile( '([^@]*)@@(.*)' )
    rlist = []
    for f in filelist:
        mo = mre.match( f )
        if mo:
            rlist.append( list(mo.groups()) )
        else:
            rlist.append( [f, None] )
    return rlist
        


#-------------------------------------------------------------------------------
#
def parseOptions( args ):
    try:
        shortOpts = 'h?pbmuA:'
        longOpts = [ 'help', \
                     'debug', \
                     'args=', \
                     'previous', 'pre', 'prev', \
                     'branch', 'br', \
                     'merge', 'm', \
                     'update', 'up' ]
        optlist, args = getopt.getopt( args, shortOpts, longOpts )
    except getopt.error, e:
        sys.stderr.write( "Error: " + e )
        printUsage()
        sys.exit(1)
        
    if len( args ) > 0:
        filelist = args
    else:
        sys.stderr.write( "No files specified." )
        printUsage()
        sys.exit(1)
    
    previous = 0
    carlist = map( lambda x: x[0], optlist )
    for opt in optlist:
        caropt = opt[0]
        if caropt == '-h' or caropt == '-?' or caropt == '--help':
            printUsage()
            sys.exit(1)
        elif caropt == '--debug':
            Options.debug = 1
        elif caropt == '-p' or caropt == '--pre' or \
             caropt == '--prev' or caropt == '--previous':
            Options.command = PREVIOUS
        elif caropt == '-b' or caropt == '--br' or caropt == '--branch':
            Options.command = BRANCH
        elif caropt == '-m' or caropt == '--merge':
            Options.command = MERGE
        elif caropt == '-u' or caropt == '--up' or caropt == '--update':
            Options.command = UPDATE
        elif caropt == '-A' or caropt == '--args':
            Options.xxdiff_args = opt[1]

    if Options.debug:
        print "<DEBUG> command =", Options.command 
        print "<DEBUG> xxdiff args =", Options.xxdiff_args
        print "<DEBUG> filelist =", filelist

    pfilelist = parseNames( filelist )
    if Options.debug:
        print "<DEBUG> parsed filenames =", pfilelist

    return pfilelist


#-------------------------------------------------------------------------------
#
def getFileContents( file ):
    ( name, revision ) = file
    if not revision:
        return None

    # open temp file.
    tfname = tempfile.mktemp( '.xxdifftmp' )
    tf = open( tfname, 'w' )

    #if not Options.debug:
    #    redir = ' 2> /dev/null'
    #else:
    #    redir = ' 2> /tmp/xxdiff.debug_log'
    # Cannot redirect for now because it needs to display password prompt.
    redir = ''

    pipe = os.popen( 'cvs update -p -r' + revision + ' ' + name + redir )
    tf.write( pipe.read() )
    pipe.close()
    tf.close()
    return tfname
    
#-------------------------------------------------------------------------------
#
def deleteTempFile( file ):
    ( name, revision, contents ) = file
    if contents:
        os.unlink( contents )

    
#-------------------------------------------------------------------------------
#
def cmdNone( flist ):
    fal = []
    i = 1
    for f in flist:
        if f[2]:
            fal.append( f[2] )
            fal.append( '--title'+repr(i)+'='+f[0]+' (CVS-'+f[1]+')' )
        else:
            fal.append( f[0] )
        i=i+1
        
    run( Options.xxdiff, string.split( Options.xxdiff_args ) + fal )

#-------------------------------------------------------------------------------
#
def run( program, args ):
    if Options.debug:
        print "<DEBUG> running:", program, string.join( args )
    try:
        #sopts = os.P_NOWAIT
        sopts = 0
        os.spawnv( sopts, program, [ program ] + args )
    except os.error, e:
        sys.stderr.write( "Error spawning program:" + e.strerror )

    

            
#===============================================================================
# MAIN
#===============================================================================

pfilelist = parseOptions( sys.argv[1:] )

# get files
for f in pfilelist:
    contents = getFileContents( f )
    f.append( contents )
    
if Options.command == NONE:
    cmdNone( pfilelist )
    
# delete temp files
for f in pfilelist:
    deleteTempFile( f )

